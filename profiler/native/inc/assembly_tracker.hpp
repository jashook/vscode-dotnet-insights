////////////////////////////////////////////////////////////////////////////////
// Module: assembly_tracker.hpp
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __ASSEMBLY_TRACKER_HPP__
#define __ASSEMBLY_TRACKER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <chrono>
#include <string>
#include <unordered_map>

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev31 {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class assembly_tracker
{
    // Ctor / Dtor
    public:
        assembly_tracker();
        ~assembly_tracker();

    // Member Methods
    public:
        void start_assembly_timing(const std::size_t, const std::wstring&);
        std::size_t stop_assembly_timing(const std::size_t, const std::wstring&);

    private:
        std::unordered_map<std::wstring, std::wstring*> assembly_map;
        std::unordered_map<std::wstring, std::unordered_map<std::size_t, std::chrono::steady_clock::time_point>*> assembly_timing_map;
};

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace (ev31)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __ASSEMBLY_TRACKER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////